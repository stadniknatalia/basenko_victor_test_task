// –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ 10x10 —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö
// Test Task: 10x10 Two-dimensional array with data analysis

class ArrayAnalyzer {
    private matrix: number[][];
    private readonly SIZE = 10;
    private readonly MIN_VALUE = -100;
    private readonly MAX_VALUE = 100;

    constructor() {
        this.matrix = this.generateMatrix();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ 10x10 —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [-100..100]
     * Generates 10x10 two-dimensional array with random numbers in range [-100..100]
     */
    private generateMatrix(): number[][] {
        const matrix: number[][] = [];
        
        for (let i = 0; i < this.SIZE; i++) {
            const row: number[] = [];
            for (let j = 0; j < this.SIZE; j++) {
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-100, 100]
                const randomNum = Math.floor(Math.random() * (this.MAX_VALUE - this.MIN_VALUE + 1)) + this.MIN_VALUE;
                row.push(randomNum);
            }
            matrix.push(row);
        }
        
        return matrix;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –≤ –º–∞—Å—Å–∏–≤–µ
     * Finds the row with the minimum number in the array
     */
    private findRowWithMinimum(): { rowIndex: number; minValue: number } {
        let globalMin = Number.MAX_SAFE_INTEGER;
        let minRowIndex = 0;

        for (let i = 0; i < this.SIZE; i++) {
            for (let j = 0; j < this.SIZE; j++) {
                if (this.matrix[i][j] < globalMin) {
                    globalMin = this.matrix[i][j];
                    minRowIndex = i;
                }
            }
        }

        return { rowIndex: minRowIndex, minValue: globalMin };
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
     * Finds the smallest positive number in a row
     */
    private findSmallestPositiveInRow(row: number[]): number | null {
        const positiveNumbers = row.filter(num => num > 0);
        
        if (positiveNumbers.length === 0) {
            return null;
        }
        
        return Math.min(...positiveNumbers);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 3 –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö 
     * –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
     * Calculates minimum replacements to avoid 3 consecutive positive or negative numbers
     */
    private calculateMinReplacements(row: number[]): number {
        let replacements = 0;
        let consecutiveCount = 1;
        let lastSign = row[0] >= 0 ? 'positive' : 'negative';

        for (let i = 1; i < row.length; i++) {
            const currentSign = row[i] >= 0 ? 'positive' : 'negative';
            
            if (currentSign === lastSign) {
                consecutiveCount++;
                
                if (consecutiveCount === 3) {
                    replacements++;
                    consecutiveCount = 1;
                    lastSign = currentSign === 'positive' ? 'negative' : 'positive';
                }
            } else {
                consecutiveCount = 1;
                lastSign = currentSign;
            }
        }

        return replacements;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
     * Formats number for aligned output
     */
    private formatNumber(num: number): string {
        return num.toString().padStart(4, ' ');
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
     * Displays array in readable format with analysis
     */
    public displayResults(): void {
        const { rowIndex: minRowIndex, minValue } = this.findRowWithMinimum();
        
        console.log('='.repeat(80));
        console.log('–î–í–£–ú–ï–†–ù–´–ô –ú–ê–°–°–ò–í 10x10 –° –ê–ù–ê–õ–ò–ó–û–ú –î–ê–ù–ù–´–•');
        console.log('10x10 TWO-DIMENSIONAL ARRAY WITH DATA ANALYSIS');
        console.log('='.repeat(80));
        console.log();

        console.log('–°—Ç–æ–ª–±—Ü—ã/Cols:    0    1    2    3    4    5    6    7    8    9');
        console.log('              ' + '----+'.repeat(10));

        for (let i = 0; i < this.SIZE; i++) {
            const rowMarker = i === minRowIndex ? '*' : ' ';
            const rowNumbers = this.matrix[i].map(num => this.formatNumber(num)).join(' ');
            
            console.log(`–°—Ç—Ä–æ–∫–∞/Row ${i}${rowMarker}: ${rowNumbers}`);
        }

        console.log();
        console.log('='.repeat(80));
        console.log('–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• / DATA ANALYSIS');
        console.log('='.repeat(80));

        console.log(`\n* –°—Ç—Ä–æ–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (${minValue}): ${minRowIndex} (–æ—Ç–º–µ—á–µ–Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–æ–π)`);
        console.log(`* Row with minimum number (${minValue}): ${minRowIndex} (marked with asterisk)`);

        console.log('\nüìä –ê–ù–ê–õ–ò–ó –ü–û –°–¢–†–û–ö–ê–ú / ROW ANALYSIS:');
        console.log('-'.repeat(80));

        for (let i = 0; i < this.SIZE; i++) {
            const smallestPositive = this.findSmallestPositiveInRow(this.matrix[i]);
            const minReplacements = this.calculateMinReplacements(this.matrix[i]);
            
            const positiveText = smallestPositive !== null 
                ? `–Ω–∞–∏–º–µ–Ω—å—à–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ: ${smallestPositive}` 
                : '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–µ—Ç';
            
            const positiveTextEn = smallestPositive !== null 
                ? `smallest positive: ${smallestPositive}` 
                : 'no positive numbers';

            console.log(`–°—Ç—Ä–æ–∫–∞ ${i}: ${positiveText}, –∑–∞–º–µ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "3 –ø–æ–¥—Ä—è–¥": ${minReplacements}`);
            console.log(`Row ${i}: ${positiveTextEn}, replacements to avoid "3 in a row": ${minReplacements}`);
            console.log();
        }

        console.log('='.repeat(80));
        console.log('–ü–û–Ø–°–ù–ï–ù–ò–Ø / EXPLANATIONS:');
        console.log('='.repeat(80));
        console.log('‚Ä¢ –°—Ç—Ä–æ–∫–∞ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*) —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º –º–∞—Å—Å–∏–≤–∞');
        console.log('‚Ä¢ Row with asterisk (*) contains the global minimum of the array');
        console.log('‚Ä¢ "3 –ø–æ–¥—Ä—è–¥" –æ–∑–Ω–∞—á–∞–µ—Ç 3 —á–∏—Å–ª–∞ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (–≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)');
        console.log('‚Ä¢ "3 in a row" means 3 numbers of the same sign (all positive or all negative)');
        console.log('‚Ä¢ –ù–æ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º / Zero is considered a positive number');
        console.log('='.repeat(80));
    }
}


function main(): void {
    console.log('–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞...');
    console.log('Starting two-dimensional array analysis...\n');
    
    const analyzer = new ArrayAnalyzer();
    analyzer.displayResults();
    
    console.log('\n–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('Analysis completed successfully!');
}


main();

export { ArrayAnalyzer }; 
